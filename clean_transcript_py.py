# -*- coding: utf-8 -*-
"""clean_transcript.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rkhV3alx1tkgKinZ9S7N1zHVX8mLK5Ek
"""

def to_clean_trascript(transcript, profile):
    
    '''
    data cleaning the transcript dataframe

    INPUT:
    transcript - the transcript dataframe to be cleaned

    OUTPUT:
    transcript - the cleaned transcript dataframe

    '''
   
    # copy dataframe from transcript to clean_transcript
    clean_transcript = transcript.copy()

    # Change name of feature person to customer_id in transcript dataframe
    clean_transcript = clean_transcript.rename(columns={'person': 'customer_id'})
    
    age118_id = profile[profile['age'] == 118]['id'].tolist()
    clean_transcript = clean_transcript[~clean_transcript.customer_id.isin(age118_id)]
    
        # to extract the 'amount' from the 'value' column
    def to_clean_amount(items):
        if 'amount' in items:
            return items['amount']
        else:
            return 0
    # to extract the 'offer id' from the 'value' column
    def to_clean_offer_id(items):
        if 'offer id' in items:
            return items['offer id']
        else:
            return 0
        
       
    transcript_event_list = ['offer received', 'offer viewed', 'transaction', 'offer completed']
    
    for item in transcript_event_list:
        clean_transcript[item] = clean_transcript['event'].apply(lambda x: 1 if item in x else 0)
    
    transcript_offer_list = ['bogo', 'discount', 'transaction', 'offer completed']
    
    clean_transcript = clean_transcript.rename(columns=lambda x: x.replace(' ', '_'))
    
    clean_transcript['amount'] = clean_transcript['value'].apply(lambda x: to_clean_amount(x))
    clean_transcript['offer_id'] = clean_transcript['value'].apply(lambda x: to_clean_offer_id(x))

    # Create another column 'offer_type' with respect to feature 'offer_id'
    clean_transcript['offer_type'] = clean_transcript['offer_id']

    bogo_ls = ['ae264e3637204a6fb9bb56bc8210ddfd','4d5c57ea9a6940dd891ad53e9dbe8da0',
               '9b98b8c7a33c4b65b9aebfe6a799e6d9','f19421c1d4aa40978ebb69ca19b0e20d']

    discount_ls = ['0b1e1539f2cc45b7b9fa7c272da2e1d7','2298d6c36e964ae4a3e7e9706d1fb8c2',
                   'fafdcd668e3743c1bb461111dcafc2a4','2906b810c7d4411798c6938adc9daaa5']

    informational_ls = ['3f207df678b143eea3cee63160fa8bed','5a8bc65990b245e5a138643cd4eb9837']

    clean_transcript['offer_type'] = clean_transcript['offer_type'].replace(bogo_ls, 'bogo')
    clean_transcript['offer_type'] = clean_transcript['offer_type'].replace(discount_ls, 'discount')
    clean_transcript['offer_type'] = clean_transcript['offer_type'].replace(informational_ls, 'informational')
    
    clean_transcript = clean_transcript.drop(['value'], axis = 1).sort_values(['customer_id', 'time'], ascending = [True, True])
    
    return clean_transcript